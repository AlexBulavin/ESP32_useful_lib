{\rtf1\ansi\ansicpg1251\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;
\red212\green214\blue154;\red89\green138\blue67;\red140\green211\blue254;\red183\green111\blue179;\red167\green197\blue152;
\red194\green126\blue101;\red202\green202\blue202;\red23\green23\blue23;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c66667;\cssrgb\c41569\c60000\c33333;\cssrgb\c61176\c86275\c99608;\cssrgb\c77255\c52549\c75294;\cssrgb\c70980\c80784\c65882;
\cssrgb\c80784\c56863\c47059;\cssrgb\c83137\c83137\c83137;\cssrgb\c11765\c11765\c11765;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21400\viewh22400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 void\cf4 \strokec4  \cf5 \strokec5 wifi_ftp_setup\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6   // Connect to Wi-Fi\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //******************************** \uc0\u1057 \u1082 \u1072 \u1085 \u1080 \u1088 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077  \u1089 \u1077 \u1090 \u1080  \u1080  \u1085 \u1072 \u1089 \u1090 \u1088 \u1086 \u1081 \u1082 \u1072  \u1087 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1086 \u1074  \u1087 \u1086 \u1076 \u1082 \u1083 \u1102 \u1095 \u1077 \u1085 \u1080 \u1103  \u1074  \u1079 \u1072 \u1074 \u1080 \u1089 \u1080 \u1084 \u1086 \u1089 \u1090 \u1080  \u1086 \u1090  \u1101 \u1090 \u1086 \u1075 \u1086  **********)\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // \uc0\u1057 \u1082 \u1072 \u1085 \u1080 \u1088 \u1091 \u1077 \u1084  \u1076 \u1086 \u1089 \u1090 \u1091 \u1087 \u1085 \u1099 \u1077  \u1089 \u1077 \u1090 \u1080  Wi-Fi\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 int\cf4 \strokec4  numNetworks = \cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 scanNetworks\cf4 \strokec4 ();\cb1 \
\cb3   \cf8 \strokec8 if\cf4 \strokec4  (numNetworks == \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 println\cf4 \strokec4 (\cf10 \strokec10 "No networks found"\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 while\cf4 \strokec4  (\cf2 \strokec2 true\cf4 \strokec4 );\cf6 \strokec6  // \uc0\u1054 \u1089 \u1090 \u1072 \u1085 \u1072 \u1074 \u1083 \u1080 \u1074 \u1072 \u1077 \u1084  \u1074 \u1099 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1080 \u1077  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1099 , \u1090 \u1072 \u1082  \u1082 \u1072 \u1082  \u1085 \u1077 \u1090  \u1076 \u1086 \u1089 \u1090 \u1091 \u1087 \u1085 \u1099 \u1093  \u1089 \u1077 \u1090 \u1077 \u1081 \cf4 \cb1 \strokec4 \
\cb3   \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6   // \uc0\u1055 \u1077 \u1088 \u1077 \u1073 \u1080 \u1088 \u1072 \u1077 \u1084  \u1085 \u1072 \u1081 \u1076 \u1077 \u1085 \u1085 \u1099 \u1077  \u1089 \u1077 \u1090 \u1080  \u1080  \u1074 \u1099 \u1073 \u1080 \u1088 \u1072 \u1077 \u1084  \u1085 \u1091 \u1078 \u1085 \u1099 \u1077  \u1085 \u1072 \u1089 \u1090 \u1088 \u1086 \u1081 \u1082 \u1080 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf8 \strokec8 for\cf4 \strokec4  (\cf2 \strokec2 int\cf4 \strokec4  i = \cf9 \strokec9 0\cf4 \strokec4 ; i < numNetworks; i++) \{\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 print\cf4 \strokec4 (\cf10 \strokec10 "Scanning network: "\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 println\cf4 \strokec4 (\cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 SSID\cf4 \strokec4 (i));\cb1 \
\
\cb3     \cf8 \strokec8 if\cf4 \strokec4  (\cf5 \strokec5 strcmp\cf4 \strokec4 (\cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 SSID\cf4 \strokec4 (i).\cf5 \strokec5 c_str\cf4 \strokec4 (), \cf10 \strokec10 "\cf11 \cb12 \outl0\strokewidth0 First\cf10 \cb3 \outl0\strokewidth0 \strokec10 "\cf4 \strokec4 ) == \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 config\cf4 \strokec4 (staticIP1, gateway1, subnet);\cb1 \
\cb3       \cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 begin\cf4 \strokec4 (\cf7 \strokec7 ssid\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ], \cf7 \strokec7 password\cf4 \strokec4 [\cf9 \strokec9 0\cf4 \strokec4 ]);\cb1 \
\cb3       \cf8 \strokec8 break\cf4 \strokec4 ;\cb1 \
\cb3     \} \cf8 \strokec8 else\cf4 \strokec4  \cf8 \strokec8 if\cf4 \strokec4  (\cf5 \strokec5 strcmp\cf4 \strokec4 (\cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 SSID\cf4 \strokec4 (i).\cf5 \strokec5 c_str\cf4 \strokec4 (), \cf10 \strokec10 "\cf11 \cb12 \outl0\strokewidth0 Second\cf10 \cb3 \outl0\strokewidth0 \strokec10 "\cf4 \strokec4 ) == \cf9 \strokec9 0\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 config\cf4 \strokec4 (staticIP2, gateway2, subnet);\cb1 \
\cb3       \cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 begin\cf4 \strokec4 (\cf7 \strokec7 ssid\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ], \cf7 \strokec7 password\cf4 \strokec4 [\cf9 \strokec9 1\cf4 \strokec4 ]);\cb1 \
\cb3       \cf8 \strokec8 break\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6     // \uc0\u1044 \u1086 \u1073 \u1072 \u1074 \u1100 \u1090 \u1077  \u1076 \u1086 \u1087 \u1086 \u1083 \u1085 \u1080 \u1090 \u1077 \u1083 \u1100 \u1085 \u1099 \u1077  \u1091 \u1089 \u1083 \u1086 \u1074 \u1080 \u1103  \u1076 \u1083 \u1103  \u1076 \u1088 \u1091 \u1075 \u1080 \u1093  \u1089 \u1077 \u1090 \u1077 \u1081 , \u1077 \u1089 \u1083 \u1080  \u1085 \u1077 \u1086 \u1073 \u1093 \u1086 \u1076 \u1080 \u1084 \u1086 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \}\cb1 \
\
\cb3   \cf8 \strokec8 while\cf4 \strokec4  (\cf7 \strokec7 WiFi\cf4 \strokec4 .\cf5 \strokec5 status\cf4 \strokec4 () != WL_CONNECTED) \{\cb1 \
\cb3     \cf5 \strokec5 delay\cf4 \strokec4 (\cf9 \strokec9 1000\cf4 \strokec4 );\cb1 \
\cb3     \cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 println\cf4 \strokec4 (\cf10 \strokec10 "Connecting to WiFi..."\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 println\cf4 \strokec4 (\cf10 \strokec10 "Connected to WiFi"\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6   // // Initialize SD card and mount file system\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // if (!SD_MMC.begin()) \{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //   Serial.println("Failed to mount SD card");\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //   return;\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // \}\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // Serial.println("SD card mounted");\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6   // Start FTP server\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   //\cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 println\cf4 \strokec4 (\cf10 \strokec10 "Try to ftp.OpenConnection()"\cf4 \strokec4 );\cb1 \
\cb3   //\cf7 \strokec7 ftp\cf4 \strokec4 .\cf5 \strokec5 OpenConnection\cf4 \strokec4 ();\cb1 \
\cb3   //\cf7 \strokec7 Serial\cf4 \strokec4 .\cf5 \strokec5 println\cf4 \strokec4 (\cf10 \strokec10 "ftp.OpenConnection() done"\cf4 \strokec4 );\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6   // // Handle FTP connections\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // server.on("/ftp", HTTP_GET, [](AsyncWebServerRequest *request)\{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //   request->send(200, "text/plain", "Hello, this is ESP32-CAM FTP server!");\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // \});\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6   // // Handle FTP file requests\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // server.on("/ftp/*", HTTP_GET, [](AsyncWebServerRequest *request)\{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //   String path = request->url().substring(5); // Remove "/ftp" from the URL\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //   serveFile(request, path);\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // \});\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6   // // Handle listing of files and folders\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // server.on("/list", HTTP_GET, [](AsyncWebServerRequest *request)\{\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //   listFiles(request, "/");\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   // \});\cf4 \cb1 \strokec4 \
\
\cf6 \cb3 \strokec6   //server.begin();\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6   //ftp.CloseConnection();\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \}\
\
\pard\pardeftab720\partightenfactor0
\cf6 \strokec6 // Setup Access Point Credentials\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf2 \strokec2 char\cf4 \strokec4 * ssid[] = \{\cf10 \strokec10 "\cf11 \cb12 \outl0\strokewidth0 First\cf10 \cb3 \outl0\strokewidth0 \strokec10 "\cf4 \strokec4 , \cf10 \strokec10 "\cf11 \cb12 \outl0\strokewidth0 Second\cf10 \cb3 \outl0\strokewidth0 \strokec10 "\cf4 \strokec4 \};\cb1 \
\cf2 \cb3 \strokec2 const\cf4 \strokec4  \cf2 \strokec2 char\cf4 \strokec4 * password[] = \{ \cf10 \strokec10 \'ab123\'bb\cf4 \strokec4 , \cf10 \strokec10 \'ab45678\'bb\cf4 \strokec4 \};\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \
}